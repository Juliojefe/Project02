name: Deploy to Heroku

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Set up Java (JDK) for Gradle (use the Java version your project needs)
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'  # or 21, etc., match your Spring Boot Java version

      # 3. Cache Gradle dependencies to speed up build times on subsequent runs
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      # 4. Build the Spring Boot application using Gradle
      # If your project is in a subdirectory (e.g., "backend"), set 'working-directory' accordingly
      - name: Build application
        working-directory: backend  # <- change or remove this if your build is at repository root
        run: ./gradlew clean build -x test  # skip tests for faster build; remove -x test to run tests

      # 5. Install the Heroku CLI (not pre-installed on latest runners)
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # 6. Deploy to Heroku using akhileshns/heroku-deploy action
      - name: Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.14.15   # Use latest stable version of the action
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: backend  # path to the app directory; use "." or remove if app is in the repository root
